<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>SimilarCases</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1393098154000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1396352668000</date>
  <contentUpdateDate>1396350913000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <class>
    <name>PhenoTips.SimilarCases</name>
    <customClass/>
    <customMapping/>
    <defaultViewSheet/>
    <defaultEditSheet/>
    <defaultWeb/>
    <nameField/>
    <validationScript/>
    <enable>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <name>enable</name>
      <number>1</number>
      <prettyName>Enable similar cases suggestions</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </enable>
    <max_results>
      <customDisplay/>
      <disabled>0</disabled>
      <name>max_results</name>
      <number>2</number>
      <numberType>integer</numberType>
      <prettyName>Maximum numbers of results to show</prettyName>
      <size>3</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>
    </max_results>
    <min_score>
      <customDisplay/>
      <disabled>0</disabled>
      <name>min_score</name>
      <number>3</number>
      <numberType>float</numberType>
      <prettyName>Minimum relevance score of retrieved suggestions (between 0 and 1)</prettyName>
      <size>3</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>
    </min_score>
  </class>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>9f32c038-3885-430b-b820-c088c0b5940a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.Matcher = Class.create({
    matchServiceURL : XWiki.contextPath + "/rest/patients/___patient_id___/similar-cases",
    matchContactURL : "${xwiki.getURL('PhenoTips.MatchContact', 'get')}",
    _UNKNOWN_INFO_MARKER : "unknown",
    _RESULTS_TABLE_MARKER : "similarity-results",
    _SUMMARY_MARKER : "summary",
    _METADATA_MARKER : "metadata",
    _NEGATIVE_MARKER : "negative",
    _NOMATCH_MARKER : "no-match",
    _MAX_RESULTS_DISPLAYED : 10,
    DISEASE_DB_LINKS : {
      "MIM:" : "http://www.omim.org/entry/",
      "ORDO:" : "http://www.orpha.net/consor/cgi-bin/OC_Exp.php?lng=EN&amp;Expert="
    },

    initialize : function(query, resultsContainer, options) {
      if (!query || !resultsContainer) {return;}
      this.query = query;
      this.matchServiceURL = this.matchServiceURL.replace(/___patient_id___/i, this.query);
      this.container = resultsContainer;

      this.buttonContainer = new Element('div',{'class':'similarity-results-button-container'});
      this.container.insert({before: this.buttonContainer});
      if (options) {
        if (options.enableRefresh) {
          var buttonLabel = new Element('span',{'class':'refresh-matches-button'}).insert("$escapetool.javascript($services.localization.render('phenotips.similarCases.refreshMatches'))");
          this.refreshButton = new Element('span', {'class' : 'buttonwrapper similarity-results-refresh'}).insert(new Element('a', {'class' : 'button', 'href' : '#'}).insert(this.Utils.generateIcon('refresh')).insert(buttonLabel));
          this.buttonContainer.insert({top: this.refreshButton});
          this.launchSearchRefresh = this.launchSearchRefresh.bindAsEventListener(this);
          this.refreshButton.observe('click', this.launchSearchRefresh);
        }
        this.matchServiceURL = options.serviceURL || this.matchServiceURL;
        this._maxResults = options.maxResults || this._MAX_RESULTS_DISPLAYED;
        this._minScore = options.minScore || '';
        this._mmeServer = options.mmeServer || "";
        this._mmeMode = (this._mmeServer != "");
        if (options.serviceDisclaimer) {
          var disclaimerButton = new Element('span', {'class' : 'buttonwrapper similarity-results-disclaimer'}).insert(new Element('a', {'class' : 'button', 'href' : '#'}).insert(this.Utils.generateIcon('gavel')).insert("$escapetool.javascript($services.localization.render('phenotips.similarCases.showDisclaimer'))"));
          this.buttonContainer.insert({bottom : disclaimerButton});
          this.displayDisclaimer = this.displayDisclaimer.bindAsEventListener(this);
          disclaimerButton.observe('click', this.displayDisclaimer);
          this._disclaimerContainer = new Element('div', {'class' : 'mme-disclaimer'});
          this._disclaimerContainer.update(options.serviceDisclaimer);
          this._disclaimerDialog = new PhenoTips.widgets.ModalPopup(this._disclaimerContainer, false, {'title': "$escapetool.javascript($services.localization.render('phenotips.similarCases.disclaimerDialogTitle'))", 'removeOnClose': false, 'resetPositionOnShow': false});
        }
        this._omimPrototypeMode = ((options.omimSection || "") != "");
        if (options.enablePagination) {
          this.paginator = new PhenoTips.widgets.MatcherPaginator(this, this.container.next('.xwiki-livetable-pagination'), 10);
          var serverSuffix = this._mmeServer &amp;&amp; ('-' + this._mmeServer) || "";
          this._PAGE_COUNT_TEMPLATE = "$escapetool.javascript($services.localization.render('phenotips.similarCases.tableHeader'))";
          this.page = 1;
          this.pagination = $('pagination-similar-cases' + serverSuffix);
        }
      }
      this.launchSearchExisting();

      this._contactContainer = new Element('div', {'class' : 'anonymous-contact'});
      this._contactDialog = new PhenoTips.widgets.ModalPopup(this._contactContainer, false, {'title': "$escapetool.javascript($services.localization.render('phenotips.similarCases.contactDialogTitle'))", 'verticalPosition': 'top', 'removeOnClose': false});
    },

    launchSearchRefresh: function(event) {
      if (event) {event.stop();}
      this.launchSearch(true);
    },

    displayDisclaimer: function(event) {
      if (event) {event.stop();}
      /* TODO: This should use the reasonable default verticalAlignment once PhenoTips.Widgets is updated */
      this._disclaimerDialog.createDialog();
      this._disclaimerDialog.positionDialogInViewport(200, 200);
      this._disclaimerDialog.showDialog();
    },

    launchSearchExisting: function() {
      this.launchSearch(false);
    },

    launchSearch : function(refresh) {
      if (this.activeSearch) {return;}
      var _this = this;
      var searchParams = this._mmeMode ? {
            'patientId' : this.query,
            'server' : this._mmeServer,
            'maxResults' : this._maxResults,
            'minScore' : this._minScore,
            'sendNewRequest' : refresh ? "true" : "false",
            'offset' : (_this.page - 1) * _this._maxResults + 1
          } : {
            'query' : this.query,
            'outputSyntax' : "plain",
            'maxResults' : this._maxResults,
            'minScore' : this._minScore,
            'offset' : (_this.page - 1) * _this._maxResults + 1
          };
      this.activeSearch = new Ajax.Request(
        this.matchServiceURL,
        {
          parameters: searchParams,
          method: "post",
          onCreate : function() {
            _this.container.addClassName('loading');
          },
          on204 : function(response) {
            data = {};
            data.nodata = true;
            _this.displayResults(data);
          },
          onSuccess : function(response) {
            _this.displayResults(response.responseJSON);
          },
          onFailure : function(response) {
            var data = {};
            data.error = _this._generateFailureReason(response.status);
            _this.displayResults(data);
          },
          onComplete : function() {
            _this.container.removeClassName('loading');
            _this.activeSearch = false;
          }
        }
      );
    },

    _generateFailureReason: function(status) {
    	var response;

    	switch(status) {
    	  case 401:
    	    response = "$escapetool.javascript($services.localization.render('phenotips.similarCases.error.notAuthenticated'))";
    	    break;
    	  case 400:
    	    response = "$escapetool.javascript($services.localization.render('phenotips.similarCases.error.badRequest'))";
    	    break;
    	  case 500:
    	    response = "$escapetool.javascript($services.localization.render('phenotips.similarCases.error.unexpectedError'))";
    	    break;
    	  default:
          response = "$escapetool.javascript($services.localization.render('phenotips.similarCases.error.unexpectedError'))";
    	}
    	return response;
    },

    changePageSize: function(newLimit) {
      this._MAX_RESULTS_DISPLAYED = newLimit;
      this._maxResults = this._MAX_RESULTS_DISPLAYED;
      this.page = 1;
      this.launchSearchExisting();
    },

    displayResults : function(data) {
      this._data = data;

      // Empty the container to make room for the new results
      this.container.update('');

      // Show result summary
      if (!data || data.nodata || data.error) {
        this.pagination.addClassName('hidden');
        this.refreshButton.down('.refresh-matches-button').innerHTML = "$escapetool.javascript($services.localization.render('phenotips.similarCases.findMatchesText'))";
        this.refreshButton.down('span').removeClassName('fa-refresh');
        this.refreshButton.down('span').addClassName('fa-search');
        if (!data || data.nodata) {
          this.displaySummary("$escapetool.javascript($services.localization.render('phenotips.similarCases.noMatchRequest'))");
        } else {
          this.displaySummary("$escapetool.javascript($services.localization.render('phenotips.similarCases.errorSendingRequest')) " + data.error);
        }
        return;
      } else {
        this.pagination.removeClassName('hidden');
        this.refreshButton.down('span').removeClassName('fa-search');
        this.refreshButton.down('span').addClassName('fa-refresh');
        this.refreshButton.down('.refresh-matches-button').innerHTML = "$escapetool.javascript($services.localization.render('phenotips.similarCases.refreshMatches'))";
      }
      if (!data || data.resultsCount &lt;= 0) {
        this.pagination.addClassName('hidden');
        this.displaySummary("$escapetool.javascript($services.localization.render('phenotips.similarCases.noSimilarCases'))");
        return;
      }
      this.totalResultsCount = data.resultsCount;
      // Make sure the results are for this query
      if (!data.query || !data.query.id || data.query.id != this.query) {
        this.pagination.addClassName('hidden');
        this.displaySummary("$escapetool.javascript($services.localization.render('phenotips.similarCases.noqueryReported'))");
        return;
      }
      data.featuresCount = data.query.features ? data.query.features.size() : 0;
      var resultsCount = this._data.returnedCount || Math.min(this.totalResultsCount, this._MAX_RESULTS_DISPLAYED);
      this.displaySummary(("$escapetool.javascript($services.localization.render('phenotips.similarCases.showingSimilar'))".replace("__numberOfCases__", resultsCount))
                          + (data.totalMatchesCount ? ". $escapetool.javascript($services.localization.render('phenotips.similarCases.totalMatches')) "
                          + data.totalMatchesCount : ""));

      // Process features
      this._queryFeatures = this._createFeatureIndex(data.query.features);

      this.renderResults();
    },

    renderResults : function() {
      this.container.update('');
      var begin = 0;
      var end = Math.min(this.totalResultsCount, this._MAX_RESULTS_DISPLAYED);

      if (this.page) {
        this.totalPages = Math.ceil(this.totalResultsCount/this._MAX_RESULTS_DISPLAYED);
        begin = this._data.offset - 1;
        end = begin + this._data.returnedCount;
        this.paginator.refreshPagination();
      }

      var firstItemRangeNo = begin + 1;
      var tableSummary = this._PAGE_COUNT_TEMPLATE.replace(/___caseRange___/g, firstItemRangeNo + "-" + end).replace(/___totalCases___/g, this.totalResultsCount).replace(/___numCasesPerPage___/g, "");
      this.displaySummary(tableSummary, null, true);

      // Process results
      var _this = this;
      var resultsTable = new Element('table', {'class' : this._RESULTS_TABLE_MARKER});
      this.container.insert(resultsTable);

      var columns = {
        "access"   : {
           title   : "",
           display : _this._displayResultAccess.bind(_this),
           field   : "access",
           enabled : !this._mmeMode
        },
        "id"       : {
           title   : this._mmeMode ? "$escapetool.javascript($services.localization.render('phenotips.similarCases.remoteCaseID'))" : "$escapetool.javascript($services.localization.render('phenotips.similarCases.caseID'))",
           display : _this._displayResultIdentifier.bind(_this),
           field   : "id",
           enabled : true
        },
        "diagnosis": {
           title   : "$escapetool.javascript($services.localization.render('phenotips.similarCases.diagnosis'))",
           display : _this._displayResultDiagnosis.bind(_this),
           field   : "disorders",
           enabled : true
        },
        "contact"  : {
           title   : "$escapetool.javascript($services.localization.render('phenotips.similarCases.contact'))",
           display : this._mmeMode ? _this._displayRemoteContactInfo.bind(_this) : _this._displayResultContactInfo.bind(_this),
           field   : this._mmeMode ? "contact" : "owner",
           enabled : true
        },
        "score"    : {
           title   : "$escapetool.javascript($services.localization.render('phenotips.similarCases.relevance'))",
           display : _this._displayResultRelevance.bind(_this),
           field   : "score",
           enabled : true
        },
        "details"  : {
           title   : "$escapetool.javascript($services.localization.render('phenotips.similarCases.details'))",
           display : _this._displayResultDetails.bind(_this),
           enabled : true
        }
      };

      this._displayTableHeader(columns, resultsTable);
      this._data.results.each(function(r) {
        _this._displayResultRow(r, columns, resultsTable);
      });
    },

    displaySummary : function (message, container, isHeader) {
      var c = container || this.container;
      var summary = new Element("p", {class: this._SUMMARY_MARKER});
      if (isHeader &amp;&amp; this.page) {
        summary.update(message);
        new PhenoTips.widgets.MatcherPageSizer(this, summary, null, this._maxResults)
      } else {
        summary.update(message);
      }

      c.insert(summary);
      return summary;
    },

    _getDisplayedQueryId : function () {
      var patientExpression = this._data &amp;&amp; this._data.query &amp;&amp; this._data.query.id &amp;&amp; (' (' + this._data.query.id + ')') || '';
      return "$escapetool.javascript($services.localization.render('phenotips.similarCases.currentPatient.title'))" + patientExpression;
    },

    _getDisplayedResultId : function (r) {
      var patientExpression = r &amp;&amp; r.id &amp;&amp; (' (' + r.id + ')') || '';
      return "$escapetool.javascript($services.localization.render('phenotips.similarCases.matchedPatient.title'))" + patientExpression;
    },

    _createFeatureIndex : function(features) {
      var featureIndex = {};
      if (features) {
        features.each(function (f) {
          if (f.type &amp;&amp; f.id) {
            featureIndex[f.type] = featureIndex[f.type] || {};
            featureIndex[f.type][f.id] = f;
          }
        });
      }
      return featureIndex;
    },

    _getEmptyTableRow : function(table, cssClass) {
      var row = new Element('tr', {'class' : cssClass || ''});
      table.insert(row);
      return row;
    },

    _displayTableHeader : function (columns, table) {
      var row = this._getEmptyTableRow(table);
      for (var c in columns) {
        columns[c].enabled &amp;&amp; row.insert(new Element("th", {"class" : c}).update(columns[c].title));
      }
      return row;
    },

    _displayResultRow : function(result, columns, table) {
      var row = this._getEmptyTableRow(table);
      for (var c in columns) {
        columns[c].enabled &amp;&amp;
        row.insert(new Element("td", {
           "class" : c + (columns[c].field &amp;&amp; !result[columns[c].field] ? " " + this._UNKNOWN_INFO_MARKER : ""),
           "title" : columns[c].title
        }).update(columns[c].display(result, columns[c].field)));
      }
      var detailsRow =  this._getEmptyTableRow(table);
      detailsRow.insert(row.down('.match-details').wrap('td', {'class' : 'details-only details', 'colspan' : row.childElements().size()}));
      return row;
    },

    _displayResultAccess : function (r) {
      var iconName = (r.access == 'match' || r.access == 'none') ? 'private' : 'public';
      return this.Utils.generateIcon(iconName);
    },

    _displayResultIdentifier : function (r) {
      if (this._mmeMode) {
        return (r.id ? r.id : "");
      } else {
        return (r.id ? new Element("a", {href : r.url || new XWiki.Document(r.id).getURL()}).update(r.id) : "$escapetool.javascript($services.localization.render('phenotips.similarCases.undisclosedIdentifier'))");
      }
    },

    _displayResultDiagnosis : function (r) {
      if (!r.disorders || !r.disorders.length) {
        return new Element('span', {'class' :  this._NOMATCH_MARKER}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.undiagnosed'))");
      } else {
        var dList = new Element('ul');
        var LINKS = this.DISEASE_DB_LINKS;
        r.disorders.each(function(d) {
          var dName = d.name;
          var dLink = '';
          for (var prefix in LINKS) {
             if (d.id.startsWith(prefix)) {
               dLink = LINKS[prefix] + d.id.substring(prefix.length);
             }
          }
          dList.insert(new Element('li').insert( dLink ? new Element('a', {href : dLink, 'target' : '_blank'}).update(dName) : dName));
        });
        return dList;
      }
    },

    _displayResultContactInfo : function (r) {
      var contactType = (r.myCase || r.myGroupsCase) ? "none" : (r.access == "public" ? "open" : "restricted");
      var icon = (contactType == 'restricted') ? this.Utils.generateIcon('contact', "$escapetool.javascript($services.localization.render('phenotips.similarCases.restrictedContactSuggestion'))") : this.Utils.generateIcon('group');
      var contactInfo;
      if (contactType == "none") {
        contactInfo = new Element("span", {"class" : "owner-info"}).insert(r.owner.name || r.owner.id || "").insert(new Element("span", {"class" : this._METADATA_MARKER}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.contactInfoText'))"));
      } else if (contactType == "open") {
        contactInfo = new Element("span", {"class" : "owner-info"}).insert(r.owner.name || r.owner.id || "").insert(new Element("span", {"class" : this._METADATA_MARKER}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.publicCase'))"));
      } else {
        contactInfo = new Element("a", {
          "href"  : "?sheet=PhenoTips.MatchContact&amp;token=" + r.token + "&amp;owner=" + r.owner.id || "",
          "title" : "$escapetool.javascript($services.localization.render('phenotips.similarCases.contactInfoTitle'))",
          "class" : "owner-info "/* + contactType*/
        }).update(r.owner.name || r.owner.id || "$escapetool.javascript($services.localization.render('phenotips.similarCases.anonymousContact'))");
        var _this = this;
        contactInfo.observe('click', function (event) {
          event.stop();
          _this._launchContactDialog(r.token, r.owner.id, r.id);
        });
      }
      return contactInfo.insert({top: " "}).insert({top: icon});
    },

    _displayRemoteContactInfo : function (r) {
      if (!r.hasOwnProperty("owner") || !r.owner.hasOwnProperty("url") || !r.owner.url) {
        return "$escapetool.javascript($services.localization.render('phenotips.similarCases.noContactInfo'))";
      }
      var contactName = r.owner.name;
      // Handle GeneMatcher returning "None" as name for organization contacts e.g. GeneDx
      if (contactName == "None") {
        contactName = "";
      }

      var hasName = (contactName &amp;&amp; contactName != "");
      var hasInstitution = (r.owner.institution &amp;&amp; r.owner.institution != "");

      var contactLabel = "";
      if (hasName) {
        contactLabel = contactName;
        if (hasInstitution) {
          contactLabel += ", ";
        }
      }
      if (hasInstitution) {
        contactLabel += r.owner.institution;
      }
      if (!hasName &amp;&amp; !hasInstitution) {
        contactLabel = "Anonymous";
      }
      var contactInfo = new Element("a", {
        "href"  : r.owner.url,
        "title" : "$escapetool.javascript($services.localization.render('phenotips.similarCases.contactOwnerTitle'))",
        "class" : "owner-info "
      }).update(contactLabel);
      return contactInfo.insert({top: " "});
    },

    _launchContactDialog : function (token, contact, matchId) {
      var _this = this;
      new Ajax.Request(this.matchContactURL, {
        parameters : {
          'patient': _this.query,
          'matchId': matchId,
          'token' : token,
          'contact': contact
        },
        onCreate : function() {
          _this._contactContainer.update('&lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')"/&gt;');
          _this._contactDialog.showDialog();
        },
        onSuccess : function(response) {
           _this._contactContainer.update(response.responseText);
           var form = _this._contactContainer.down('form');
           var generateAction = form.down('input[name="generateAction"]');
           var userMessage = form.down('#contact-message-preview');
           if (userMessage &amp;&amp; form &amp;&amp; generateAction) {
             // TODO only update with the latest response
             form.select('input, textarea').invoke('observe', 'change', function (event) {
               new Ajax.Request(generateAction.value, {
                 parameters : form.serialize({'hash': true, 'submit': false}),
                 onSuccess : function (response) {
                   userMessage.update(response.responseText);
                 }
               });
             });
           }
           _this._contactContainer.select('input[name="cancel"]').invoke('observe', 'click', function(event) {_this._contactDialog.closeDialog();});
           form.observe('submit', function(event) {
             event.stop();
             new Ajax.Request(form.action, {
               parameters : form.serialize({'hash': true, 'submit': 'send'}),
               onSuccess : function (response) {
                 _this._contactContainer.update("$escapetool.javascript($services.localization.render('phenotips.similarCases.emailSent'))");
               },
               onFailure : function (response) {
                 _this._contactContainer.update("$escapetool.javascript($services.localization.render('phenotips.similarCases.emailError'))");
               }
             });
           });
        },
        onFailure : function(response) {
          var failureReason = response.responseText || response.statusText;
          if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
             failureReason = 'Server not responding';
          }
          _this._messages.update(new Element('div', {'class' : 'errormessage'}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.failedContactDialog')) " + failureReason));
        },
        on0 : function (response) {
          response.request.options.onFailure(response);
        }
      });
    },

    _displayResultRelevance : function (r, fieldName) {
      return new Element("div").insert(new Element("p")).insert(this.Utils.generateSegmentedBar(5, r[fieldName]));
    },

    _displayResultDetails : function (r) {
      var details = new Element("div");

      // Provide access to the actual matching details
      var showIcon = '&lt;span class="fa fa-plus-square-o fa-lg"&gt;&lt;/span&gt;';
      var hideIcon = '&lt;span class="fa fa-minus-square-o fa-lg"&gt;&lt;/span&gt;';
      var showDetails = new Element("a", {"href" : "#", "class" : "button secondary tool show"}).update(showIcon+" $escapetool.javascript($services.localization.render('phenotips.similarCases.details.show'))");
      var hideDetails = new Element("a", {"href" : "#", "class" : "button secondary tool hide"}).update(hideIcon+" $escapetool.javascript($services.localization.render('phenotips.similarCases.details.hide'))");
      var matchSummary = this.displaySummary("", details).insert(new Element('span', {"class" : "buttonwrapper"}).insert(showDetails).insert(hideDetails));

      // Generate the feature/variant comparison table
      var matchBreakdown = this._displayMatchData(this._data.query, r);
      details.insert(matchBreakdown);

      // Add behavior for showing/hiding the comparison table
      matchBreakdown.hide();
      hideDetails.hide();
      showDetails.observe('click', function(event) {
        event.stop();
        showDetails.hide();
        hideDetails.show();
        matchBreakdown.show();
      });
      hideDetails.observe('click', function(event) {
        event.stop();
        showDetails.show();
        hideDetails.hide();
        matchBreakdown.hide();
      });

      if (this._data.query.features) {
        this._data.query.features.each(function(f){f.match = []});
      }
      return details;
    },

    _displayMatchData : function(query, r) {
      var result = new Element("div", {"class" : "match-details"});
      result.insert(this._displayAgeOfOnset(r));
      result.insert(this._displayModeOfInheritance(r));
      result.insert(this._displayFeatureMatches(r));
      result.insert(this._displayGeneMatches(r));
      return result;
    },

    _createTableSectionTitle : function(table,r ) {
      var row = this._getEmptyTableRow(table);
      row.insert(new Element('th', {'class' : 'hint query'}).update(this._getDisplayedQueryId()));
      row.insert(new Element('th', {'class' : 'hint result'}).update(this._getDisplayedResultId(r)));
    },

    _displayAgeOfOnset : function(r) {
      var container = new Element('div', {'class' : 'match-type age-of-onset'});
      container.insert(new Element('h3').update("$escapetool.javascript($services.localization.render('phenotips.similarCases.ageOfOnset'))"));
      var formatAgeOfOnset = function(age) {return age ? age : "$escapetool.javascript($services.localization.render('phenotips.similarCases.unknown'))";};
      var ageOfOnsetTable = new Element('table', {'class' : 'age-of-onset'});
      container.insert(ageOfOnsetTable);

      this._createTableSectionTitle(ageOfOnsetTable, r);

      var row = this._getEmptyTableRow(ageOfOnsetTable);
      row.insert(new Element('td', {'class' : 'table-data query'}).update(formatAgeOfOnset(r.global_age_of_onset)));
      row.insert(new Element('td', {'class' : 'table-data result'}).update(formatAgeOfOnset(r.matched_global_age_of_onset)));

      return container;
    },

    _displayModeOfInheritance : function(r) {
      var container = new Element('div', {'class' : 'match-type mode-of-inheritance'});
      container.insert(new Element('h3').update("$escapetool.javascript($services.localization.render('phenotips.similarCases.modeOfInheritance'))"));
      var modeOfInheritanceTable = new Element('table', {'class' : 'mode-of-inheritance'});
      container.insert(modeOfInheritanceTable);

      this._createTableSectionTitle(modeOfInheritanceTable, r);

      var row = this._getEmptyTableRow(modeOfInheritanceTable);

      var handleEmptyArray = function(moiArray) {return (moiArray &amp;&amp; moiArray.length &gt; 0) ? moiArray : ["$escapetool.javascript($services.localization.render('phenotips.similarCases.unknown'))"];};

      var referenceElement = new Element('td', {'class' : 'table-data query'});
      row.insert(referenceElement);
      handleEmptyArray(r.global_mode_of_inheritance).each(function (item) {
          referenceElement.insert(new Element('div').update(item));
      });

      var matchedElement = new Element('td', {'class' : 'table-data result'});
      row.insert(matchedElement);
      handleEmptyArray(r.matched_global_mode_of_inheritance).each(function (item) {
          matchedElement.insert(new Element('div').update(item));
      });

      return container;
    },

    _displayFeatureMatches : function (r) {
      var container = new Element('div', {'class' : 'match-type features'});
      container.insert(new Element('h3').update("$escapetool.javascript($services.localization.render('phenotips.similarCases.phenotypicFeaturesBreakdown'))"));
      if (!r.featureMatches) {
        container.insert(new Element('p', {'class' : 'hint block'}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.noPhenotypeInformation'))"));
        return container;
      }
      var phenotypeMatchTable = new Element('table', {'class' : 'phenotype-matches'});
      var _this = this;

      var titlesTable = new Element('table', {'class' : 'phenotype-matches-titles'});
      container.insert(titlesTable);
      this._createTableSectionTitle(titlesTable, r);

      var resultFeatures = _this._createFeatureIndex(r.features);
      r.featureMatches.each(function (featureMatch) {
           var categoryRow = _this._getEmptyTableRow(phenotypeMatchTable);
           categoryRow.insert(new Element('th', {'class' : 'phenotype-category'}).update(featureMatch.category
                                                                                         &amp;&amp; featureMatch.category.name
                                                                                         || "$escapetool.javascript($services.localization.render('phenotips.similarCases.unknownCategory'))"));
           categoryRow.insert(new Element('th'));
           var phenotypeRow = _this._getEmptyTableRow(phenotypeMatchTable);
           var crtPFeatures = new Element('td', {'class' : 'table-data query'});
           var otherPFeatures = new Element('td', {'class' : 'table-data result'});
           phenotypeRow.insert(crtPFeatures).insert(otherPFeatures);
           if (featureMatch.reference) {
             featureMatch.reference.each(function (fId) {
               crtPFeatures.insert(_this._displayFeature(_this._queryFeatures['phenotype']
                                                         &amp;&amp; _this._queryFeatures['phenotype'][fId]
                                                         || _this._queryFeatures['prenatal_phenotype']
                                                         &amp;&amp; _this._queryFeatures['prenatal_phenotype'][fId])
                                                         || (fId &amp;&amp; ("&lt;div&gt;"+fId+"&lt;/div&gt;"))
                                                         || '');
             });
           } else {
             crtPFeatures.insert("-");
           }
           if (featureMatch.match) {
             var undisclosedCount = 0;
             featureMatch.match.each(function (fId) {
               if (fId) {
                 otherPFeatures.insert(_this._displayFeature(resultFeatures['phenotype']
                                                             &amp;&amp; resultFeatures['phenotype'][fId]
                                                             || resultFeatures['prenatal_phenotype']
                                                             &amp;&amp; resultFeatures['prenatal_phenotype'][fId])
                                                             || (fId &amp;&amp; ("&lt;div&gt;"+fId+"&lt;/div&gt;"))
                                                             || '');
               } else {
                 undisclosedCount++;
               }
             });
             if (undisclosedCount &gt; 0) {
               otherPFeatures.insert(new Element('div', {'class' : _this._UNKNOWN_INFO_MARKER})
                                                .update(undisclosedCount
                                                + " $escapetool.javascript($services.localization.render('phenotips.similarCases.undisclosedFeature'))"));
             }
           } else {
             otherPFeatures.insert("-");
           }
      });

      container.insert(phenotypeMatchTable);
      return container;
    },

   _displayFeature : function(f) {
      if (!f) { return ''; }
      var prefix = "", cssModifier = !f.label &amp;&amp; this._UNKNOWN_INFO_MARKER || "";
      if (f.isPresent === false) {
        prefix = "NO ";
        cssModifier += " " + this._NEGATIVE_MARKER;
      }
      var container = new Element("div");
      var name = new Element("span", {
         "title" : (f.id || "") + " " + (f.label || ""),
         "class" : cssModifier
      }).insert(f.label &amp;&amp; prefix + f.label || "$escapetool.javascript($services.localization.render('phenotips.similarCases.undisclosedInfo'))");
        //.insert(f.type &amp;&amp; new Element("span", {"class" : this._METADATA_MARKER}).insert(" (" + f.type + ")") || "");
      container.insert(name);
      if (f.metadata) {
        var metadata = new Element ("ul", {"class" : this._METADATA_MARKER});
        container.insert(metadata);
        f.metadata.each(function(m) {
          if (m.label) {
            var entry = new Element("li", {"title" : (m.id || "") + " " + (m.label || ""), "class" : f.type || ""}).update(m.label || "$escapetool.javascript($services.localization.render('phenotips.similarCases.undisclosedInfo'))");
            metadata.insert(entry);
          }
        });
      }
      return container;
    },

    _displayGeneMatches : function(r) {
      var container = new Element('div', {'class' : 'match-type genes'});
      container.insert(new Element('h3').update("$escapetool.javascript($services.localization.render('phenotips.similarCases.geneMatchingBreakdown'))"));
      var _this = this;
      if (!r.genes) {
        // The 'genes' field is absent when there is no genetic information in one of the two patients
        container.insert(new Element('p', {'class' : 'hint block'}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.noGeneticInfo'))"));
      } else if (r.genes.length == 0) {
        // The 'genes' field is present but empty when both patients have genetic information available but no matches were found
        container.insert(new Element('p', {'class' : 'hint block'}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.noGenotypeMatches'))"));
      } else {
        // Display genotype matches
        var genotypeMatchTable = new Element('table', {'class' : 'gene-matches'});
        r.genes.each(function (geneInfo) {
          var titleRow = _this._getEmptyTableRow(genotypeMatchTable, 'gene-row');
          titleRow.insert(new Element('th', {'class' : 'gene'})
                               .insert(geneInfo.symbol || geneInfo.gene)
                               .insert(new Element('input', {'type':'hidden', 'name': 'gene_name', 'class' : 'gene-name', 'value' : geneInfo.gene}))
                                /* The genename service should populate this with links if the input is present*/
          ).insert(new Element('th', {'class' : 'variants-toggle'}));
          if (geneInfo.reference || geneInfo.match) {
            if (geneInfo.reference &amp;&amp; geneInfo.reference.variants || geneInfo.match &amp;&amp; geneInfo.match.variants) {
              var showVariants = new Element("a", {"href" : "#", "class" : "button secondary tool show"}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.showVariants'))");
              var hideVariants = new Element("a", {"href" : "#", "class" : "button secondary tool hide"}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.hideVariants'))");
              var variantToggle = new Element('span', {"class" : "buttonwrapper"}).insert(showVariants).insert(hideVariants);

              titleRow.down('th.variants-toggle').insert(variantToggle);
              var variantsRow = _this._getEmptyTableRow(genotypeMatchTable, 'variants-row');
              variantsRow.insert(new Element('td', {'class' : 'query'})
                                     .insert(geneInfo.reference
                                             &amp;&amp; geneInfo.reference.variants
                                             &amp;&amp; _this._displayVariants(geneInfo.reference.variants)
                                             || "$escapetool.javascript($services.localization.render('phenotips.similarCases.noVariantInformation'))"));
              variantsRow.insert(new Element('td', {'class' : 'result'})
                                     .insert(geneInfo.match
                                             &amp;&amp; geneInfo.match.variants
                                             &amp;&amp; _this._displayVariants(geneInfo.match.variants)
                                             || "$escapetool.javascript($services.localization.render('phenotips.similarCases.noVariantInformation'))"));

              // Add behavior for showing/hiding the variants
              variantsRow.hide();
              hideVariants.hide();
              showVariants.observe('click', function(event) {
                  event.stop();
                  showVariants.hide();
                  hideVariants.show();
                  variantsRow.show();
              });
              hideVariants.observe('click', function(event) {
                  event.stop();
                  showVariants.show();
                  hideVariants.hide();
                  variantsRow.hide();
              });
            }
          }
        });
        container.insert(genotypeMatchTable);
      }
      return container;
    },

   _displayVariants : function (variants) {
      if (!variants || variants.length == 0) {
        return new Element('span', {'class' : 'hint'}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.noVariantInformation'))");
      }
      var result = new Element('table', {'class' : 'variants-data'});
      var _this = this;
      var hRow = _this._getEmptyTableRow(result);
      variants.each(function (v) {
         var vRow = _this._getEmptyTableRow(result);
         var position = new Element('span', {'class' : 'hint'}).update("$escapetool.javascript($services.localization.render('phenotips.similarCases.undisclosedPosition'))");
         var change = "";
         if (v.referenceName &amp;&amp; (v.start || (v.start_position &amp;&amp; v.end_position))) {
            var start = v.start || v.start_position;
            var end = v.start &amp;&amp; (v.start + (v.referenceBases &amp;&amp; (v.referenceBases.length - 1) || 0)) || v.end_position;
            if (start != end) {
              position = "chr" + v.referenceName.toUpperCase() + ": " + start + " - " + end;
            } else {
              position = "chr" + v.referenceName.toUpperCase() + ": " + start;
            }
            var positionURLFragment = "chr" + v.referenceName.toUpperCase() + ":" + start + "-" + end;
            var assembly = v.assembly || "hg19";
            position = new Element('a', {
                 'href' : 'http://genome.ucsc.edu/cgi-bin/hgTracks?db=' + assembly + '&amp;position=' + encodeURIComponent(positionURLFragment),
                 'class' : 'button secondary',
                 'target' : '__blank',
                 'title' : "$escapetool.javascript($services.localization.render('phenotips.similarCases.UCSCGenomeBrowser'))"
            }).update(position).wrap('span', {'class' : 'buttonwrapper'});
            if (v.referenceBases &amp;&amp; v.alternateBases) {
              var displayedRef = v.referenceBases.length &lt;= 15 ? v.referenceBases : (v.referenceBases.substring(0, 9) + "..." + v.referenceBases[v.referenceBases.length - 1]);
              var displayedAlt = v.alternateBases.length &lt;= 15 ? v.alternateBases : (v.alternateBases.substring(0, 9) + "..." + v.alternateBases[v.alternateBases.length - 1]);
              change = "&lt;span class='dna-fragment ref'&gt;" + displayedRef + "&lt;/span&gt; → &lt;span class='dna-fragment alt'&gt;" + displayedAlt + "&lt;/span&gt;";
            }
         }
         vRow.insert(new Element('td').insert(position)
                                      .insert(new Element('div')
                                                     .insert(new Element('strong').update(change))
                                                     .insert(v.effect &amp;&amp; new Element('span', {'class' : 'hint'}).update(' (' + v.effect + ')') || '')
                                                     .insert(v.zygosity &amp;&amp; new Element('span', {'class' : 'hint'}).update(' (' + v.zygosity + ')') || '')
                                       )
         );
      });
      return result;
   },

    Utils : {
      // HSV to RGB conversion
      hsv2rgb : function(h,s,v) {
        // Adapted from http://jsres.blogspot.ca/2008/01/convert-hsv-to-rgb-equivalent.html
        // hsv values = 0 - 1, rgb values = 0 - 255
        var r, g, b;
        if (s == 0){
          r = g = b = v;
        } else {
          // h must be &lt; 1
          var var_h = h * 6;
          if (var_h == 6) {
            var_h = 0;
          }
          var var_i = Math.floor(var_h);
          var var_1 = v * (1 - s);
          var var_2 = v * (1 - s * (var_h - var_i));
          var var_3 = v * (1 - s * (1 - (var_h - var_i)));
          if (var_i == 0) {
            r = v;
            g = var_3;
            b = var_1;
          } else if (var_i == 1) {
            r = var_2;
            g = v;
            b = var_1;
          } else if (var_i == 2) {
            r = var_1;
            g = v;
            b = var_3;
          } else if (var_i == 3) {
            r = var_1;
            g = var_2;
            b = v;
          } else if (var_i == 4) {
            r = var_3;
            g = var_1;
            b = v;
          } else {
            r = v;
            g = var_1;
            b = var_2;
          }
        }
        return {r : Math.round(r * 255), g : Math.round(g * 255), b : Math.round(b * 255)};
      },

      _colorTranslation : {
        h: {min : 0, max : 0.4},
        s: {min : 0, max : 0.7},
        v: {min : 0, max : 1},
        neutralSpan: 0.2,

        getHue : function (value) {
           return this.h.min + (this.h.max - this.h.min) * value;
        },

        getSaturation : function (value, neutralMiddle) {
           return this._getComponentValue(this.s, value, neutralMiddle ? this.neutralSpan : 0);
        },

        getValue : function (value, neutralMiddle) {
           return this._getComponentValue(this.v, value, neutralMiddle ? this.neutralSpan : 0);
        },

        _getComponentValue : function(component, value, neutralSpan) {
          if (value &gt; 0.5 - neutralSpan &amp;&amp; value &lt;  0.5 + neutralSpan) {
            return component.min + (component.max - component.min) * Math.abs(0.5 - value)/0.5;
          } else {
            return ((value &gt; 0.5 + neutralSpan) ? component.min + (component.max - component.min) : 1);
          }
        }
      },

      // For a value in [0, 1], generate a color from red to green, where low = red and high = green
      // @param value the value in [0, 1] which is to be represented by a color
      // @param neutralMiddle optional indicator of whether for middle values the color is yellow or gray (neutral); defaults to false
      // @return an object with the fields r, g, b, holding integer values in [0, 255]
      getRGBForValue : function(value, neutralMiddle) {
        var neutralRange = neutralMiddle ? 0.2 : 0;
        var h = 0.4 * value;
        var s = (value &gt; 0.5 - neutralRange &amp;&amp; value &lt;  0.5 + neutralRange) ? 0.9 * Math.abs(0.5 - value)/0.5 : ((value &gt; 0.5 + neutralRange) ? (1 - 0.0000025 * value) : 1);
        var v = (value &gt; 0.5 - neutralRange &amp;&amp; value &lt;  0.5 + neutralRange) ? (1 - neutralRange) + Math.abs(0.5 - value) : ((value &gt; 0.5 + neutralRange) ? (1 - 0.2 * value) : 1);
        var rgb = this.hsv2rgb(h, s, v);
        return rgb;
      },

      // For a value in [0, 1], generate the representation of a color from red to green, where low = red and high = green
      // @param value the value in [0, 1] which is to be represented by a color
      // @param neutralMiddle optional indicator of whether for middle values the color is yellow or gray (neutral); defaults to false
      // @return an string "rgb(&lt;r&gt;, &lt;g&gt;, &lt;b&gt;)" where r, g, b are integer values in [0, 255]
      getColorForValue : function(value, neutralMiddle) {
        var rgb = this.getRGBForValue(value, neutralMiddle);
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
      },

      // For a value in [0, 1], generate the representation either white or black, whichever contrasts better with the color (between red and green) representing that value
      // @param value the value in [0, 1]
      // @return an string "rgb(&lt;r&gt;, &lt;g&gt;, &lt;b&gt;)" where r, g, b are integer values in [0, 255]
      getContrastColorForValue : function(value) {
        var h = 0.4 * value;
        var contrast = (h &lt; 0.1 || h &gt; 0.6) ? 1 : 0;
        return "rgb(" + contrast * 255 + "," + contrast * 255 + "," + contrast * 255 + ")";
      },

      // For a value in [0, 1], generate a representation consisting of a coloured bar: low = red and empty,high = green and full
      // @param value the value in [0, 1] which is to be represented by the bar
      // @return an HTML element
      generateValueBar : function(value) {
        var color = this.getColorForValue(value);
        var length = Math.round((value)*100);
        var bar = new Element("span", {"class" : "value-bar", "style" : "border-color: " + color + ";"});
        var fill = new Element ("span", {"class" : "value-bar-fill", "style" : "background-color: " + color + "; width: " + length + "%;"});
        bar.insert(fill);
        return bar;
      },

      generateSegmentedBar : function(count, value) {
        var barOptions = {
          'segments' : count
        };
        return new PhenoTips.widgets.SegmentedBar(value, barOptions).generateSegmentedBar();
      },

      generateIcon : function (name, text, size) {
         return PhenoTips.widgets.Icons.getIcon(name, text, size);
      }
    }
  });

  var init = function() {
    var maxResults = $('similarity_results__max_results');
    var minScore = $('similarity_results__min_score');
    $$('.similarity-results-container').each(function (container) {
      var serviceInfo = container.down('input[name="service"]');
      var mmeServer = container.down('input[name="mmeServer"]');
      var omimSection = container.down('input[name="omimSection"]');
      var serviceDisclaimer = container.down('input[name="serviceDisclaimer"]');
      new PhenoTips.widgets.Matcher(new XWiki.Document().page, container, {
        enableRefresh: true,
        serviceURL: serviceInfo &amp;&amp; serviceInfo.value,
        maxResults: maxResults &amp;&amp; maxResults.value,
        minScore: minScore &amp;&amp; minScore.value,
        mmeServer: mmeServer &amp;&amp; mmeServer.value,
        omimSection: omimSection &amp;&amp; omimSection.value,
        serviceDisclaimer: serviceDisclaimer &amp;&amp; serviceDisclaimer.value,
        enablePagination: true
      });
    });
  };

  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Similar cases suggestions code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>c6c502ee-b4bb-4329-ba9f-db75d315a963</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.Icons = {
    _sizes : ['lg', '2x', '3x', '4x'],
    _translation : {
      'public' : 'unlock',
      'private' : 'lock',
      'matchable' : 'lock',
      'contact': 'envelope',
      'owned' : 'unlock',
      'match' : 'lock'
    },
    getIcon : function (name, text, size) {
      return new Element('span', {
         "class" : this._translateName(name) + " " + this._translateSize(size),
         "title" : text || ''
      }).update(' ');
    },
    _translateSize : function(size) {
      return this._sizes.indexOf(size) &gt;= 0 ? "fa-" + size : "";
    },
    _translateName : function(name) {
      return "fa fa-" + (this._translation[name] || name);
    }
  };
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>FontAwesome icon utils</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6245ccba-6efe-4b3a-8f64-3de27980546f</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.MatcherPaginator = Class.create({
    initialize: function(table, domNode, max) {
      var _this = this;
      this.table = table;
      this.max = max;
      this.pagesNode = domNode.down(".xwiki-livetable-pagination-content");
      var prevPagination = domNode.down(".prevPagination");
      var nextPagination = domNode.down(".nextPagination");
      prevPagination &amp;&amp; prevPagination.observe("click", function(ev) {
        _this.gotoPrevPage(ev);
      });
      nextPagination &amp;&amp; nextPagination.observe("click", function(ev) {
        _this.gotoNextPage(ev);
      });
    },
    refreshPagination: function() {
      var _this = this;
      this.pagesNode.innerHTML = "";
      var pages = this.table.totalPages;
      var currentMax = (!this.max) ? pages : this.max;
      var currentPage = this.table.page;
      var startPage = Math.floor(currentPage / currentMax) * currentMax - 1;
      
      // always display the first page
      if (startPage&gt;1) {
         this.pagesNode.insert(_this.createPageLink(1, false));
         if (startPage&gt;2) {
            this.pagesNode.insert(" ... ");
         }
      }
      // display pages
      for (var i=(startPage&lt;=0) ? 1 : startPage;i&lt;=Math.min(startPage + currentMax + 1, pages);i++) {
         var selected = (currentPage == i);
         this.pagesNode.insert(_this.createPageLink(i, selected));
         this.pagesNode.insert(" ");
      }
      // always display the last page.
      if (i&lt;pages) {
        if (i+1 &lt;= pages) {
          this.pagesNode.insert(" ... ");
        }
        this.pagesNode.insert(_this.createPageLink(pages, false));
      }

      this._updateArrowsState(currentPage, pages);
    },
    createPageLink: function(page, selected) {
        var pageSpan = new Element("a", {'class':'pagenumber', 'href':'#'}).update(page);
        if (selected) {
           pageSpan.addClassName("selected");
        }
        var _this = this;
        pageSpan.observe("click", function(ev){
            ev.stop();
            _this.gotoPage(ev.element().innerHTML);
        });
        return pageSpan;
    },
    gotoPage: function(page)
    {
      this.table.page = parseInt(page);
      this.table.launchSearchExisting();
    },
    gotoPrevPage: function(ev) {
      ev.stop();
      var prevPage = this.table.page - 1;
      if (prevPage &gt; 0) {
        this.table.page--;
        this.table.launchSearchExisting();
      }
    },
    gotoNextPage: function(ev) {
      ev.stop();
      var pages = this.table.totalPages;
      var nextPage = this.table.page + 1;
      if (nextPage &lt;= pages) {
        this.table.page++;
        this.table.launchSearchExisting();
      }
    },
    _updateArrowsState: function(currentPage, pages) {
      if (currentPage &lt;= 1) {
        this._switchClassName('noPrevPagination', 'prevPagination');
      } else {
        this._switchClassName('prevPagination', 'noPrevPagination');
      }
      if (currentPage &gt;= pages) {
        this._switchClassName('noNextPagination', 'nextPagination');
      } else {
        this._switchClassName('nextPagination', 'noNextPagination');
      }
    },
    _switchClassName: function(addName, removeName) {
      if (!this.pagesNode.up().previous('.controlPagination')) {
        return;
      }
      var page = this.pagesNode.up().previous('.controlPagination').down('.' + removeName);
      page &amp;&amp; page.addClassName(addName).removeClassName(removeName);
    }
  });
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Similar cases pagination code</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4c92006b-b9ff-4c94-a49d-121de24ba212</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.MatcherPageSizer = Class.create({
    initialize: function(table, domNode, pageSizeBounds, currentPageSize) {
      this.table = table;
      this.currentValue = currentPageSize;
      var bounds = pageSizeBounds || [10, 100, 10];
      this.startValue = bounds[0];
      this.step = bounds[2];
      this.maxValue = bounds[1];
      domNode.insert(this.createPageSizeSelectControl());
    },
    /**
     * Create the page size control using a select node and returns it
     * @return an Element containing the select
     **/
    createPageSizeSelectControl: function() {
      var select = new Element('select', {'class':'pagesizeselect'});
      for (var i=this.startValue; i&lt;=this.maxValue; i += this.step) {
        var attrs = {'value':i, 'text':i};
        if (i == this.currentValue) {
          attrs.selected = true;
        } else {
          var prevStep = i - this.step;
          if (this.currentValue > prevStep &amp;&amp; this.currentValue &lt; i) {
            select.appendChild(new Element('option', {'value':this.currentValue, 'text':this.currentValue, selected:true}).update(this.currentValue));
          }
        }
        select.appendChild(new Element('option', attrs).update(i));
      }
      select.observe("change", this.changePageSize.bind(this));
      return select;
    },

    /**
     * Change the page size of the table
     **/
    changePageSize: function(event) {
      event.stop();
      var newLimit =  parseInt($F(Event.element(event)));
      this.table.changePageSize(newLimit);
    }
  });
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Similar cases page sizer code</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>314a760a-1ec1-46d2-a262-b728dd8e61f9</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

.chapter.similarity-info .action-edit {
  display: none !important;
}
.similarity-results-refresh,
.similarity-results-disclaimer {
  float: right;
}
.similarity-results-container {
  clear: both;
  min-height: 3em;
}
.similarity-results-button-container {
  float: right;
}
.chapter.similarity-info .similar-cases-category {
  margin-top: 1em;
}
.chapter.similarity-info h3 {
  border: 0 none;
}
.chapter.similarity-info .similar-cases-local h3 {
  float: left;
  margin-top: 5px;
}
.similarity-results-container .similarity-results {
  border: 0 none;
  margin: 1em 0 0;
  width: 100%;
  position: relative;
}
.similarity-results th {
  border: 0 none;
  background: transparent
}
.similarity-results th.details {
  text-align: right;
  width: 300px;
}
.similarity-results td {
  border: 0 none;
  border-top: 1px solid $theme.borderColor;
  text-align: left;
  vertical-align: baseline;
}
.similarity-results &gt; tr &gt; td {
  padding-bottom: 0;
}
.similarity-results &gt; tr &gt; td.details-only {
  border-top: 0 none;
  padding-bottom: 0.3em;
  padding-top: 0;
}
.similarity-results .unknown, .similarity-results .no-match , .similarity-results .metadata, .similarity-results .tool {
  font-size: .8em;
  font-style: italic;
}
.similarity-results .unknown {
  opacity: .4;
}
.similarity-results .no-match {
  color: $theme.notificationErrorColor;
}
.similarity-results td.access {
  width: 16px;
}
.similarity-results td.contact {
  opacity: 1;
}
#similar-prototypes-container .contact {
  display: none;
}
.similarity-results td.contact .owner-info {
  background: transparent none left top no-repeat;
}
.similarity-results td.contact .owner-info .metadata {
  display: block;
  opacity: .4;
  padding-left: 1.6em;
}
.similarity-results td.diagnosis ul {
  list-style-type: none;
  margin: 0;
}
.similarity-results td.match {
  padding-left: 3px;
  padding-right: 3px;
  text-align: center;
}
.similarity-results .details .summary {
  text-align: right;
}
.similarity-results .details .summary .buttonwrapper {
  margin: 0;
}
.similarity-results .details .summary .button {
  white-space: nowrap;
}
.similarity-results .details .match-details {
  background: #FFF;
  border: 1px solid #DDD;
  margin-top: 10px;
  padding: 5px 1em;
  position: relative;
  z-index: 100;
  box-shadow: 0 1px 4px rgba(0, 0, 0, .5);
}
.similarity-results .details .match-details:before, .similarity-results .details .match-details:after {
  content: "";
  display: block;
  width: 0;
  height: 0;
  position: absolute;
  top: -10.5px;
  right: 9px;
  border: 11px solid transparent;
  border-top: 0 none;
  border-bottom-color: #DDD;
}
.similarity-results .details .match-details:after {
  top: -9.5px;
  right: 10px;
  border: 10px solid transparent;
  border-top: 0 none;
  border-bottom-color: #FFF;
}
.similarity-results .details table {
  margin: 0;
  width: 100%;
}
.similarity-results .details .match-type {
  display: inline-block;
  width: 50%;
  vertical-align: top;
  box-sizing: border-box;
  padding-right: 5px;
  padding-left: 5px;
  margin-bottom: 10px;
}
.similarity-results .details table tr:nth-child(2n) {
  background-color: #F9F9F9;
}
.similarity-results .details table th {
  border-bottom: 1px solid $theme.borderColor !important;
  font-size: 0.8em;
  text-transform: uppercase;
}
.similarity-results .details table td {
  border: 0 none !important;
  vertical-align: baseline !important;
  padding: .5em;
}
.similarity-results .details .negative {
  color: $theme.notificationErrorColor;
}
.similarity-results .details .metadata {
  color: $theme.notificationInfoColor;
}
.similarity-results .details ul.metadata {
  margin: 0 2em;
  list-style-type: none;
}
.similarity-results .details ul.metadata li {
  line-height: 1.1em;
}
.similarity-results .details .tool {
  color: $theme.linkColor;
  cursor: pointer;
}
.similarity-info .refresh-matches-button {
  margin-left: 5px;
  white-space: nowrap;
}
.similarity-info .pagesizeselect {
  margin-left: 5px;
}
.similarity-info a.pagenumber {
  margin-left: 5px;
}
.match-type .block {
  display: inline-block;
  width: 100%;
}
.gene-matches .variants-data th .left{
  float : left;
}
.gene-matches .variants-data th .right{
  float : right;
}</code>
    </property>
    <property>
      <name>Similar cases suggestions style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>fbd8e808-942d-40f2-9478-ef83760355c8</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

.match-details table.gene-matches&gt;tr.gene-row,
.match-details table.phenotype-matches&gt;tr:nth-child(2n+1) {
  background-color: $theme.menuLinkColor;
  background-color: $theme.menuBackgroundColor;
  color: $theme.menuLinkColor;
  text-shadow: none;
}
.match-details table.gene-matches&gt;tr.variants-row,
.match-details table.phenotype-matches&gt;tr:nth-child(2n){
  background-color: transparent;
}
.match-details table.phenotype-matches&gt;tr:nth-child(2n)&gt;td {
  padding-bottom: 0;
}
.match-details table.phenotype-matches&gt;tr:nth-child(2n)&gt;td {
  padding-top: 0;
}

.match-details table.age-of-onset &gt; tr &gt; td,
.match-details table.mode-of-inheritance &gt; tr &gt; td {
  padding-top: 0;
  padding-bottom: 0;
  background-color: $theme.menuLinkColor;
}

.match-details table &gt; tr &gt; td.result {
  background: $theme.highlightColor;
}

.match-details .gene-matches .gene, .match-details .gene-matches .variants-toggle {
  text-align: left;
}
.match-details .gene-matches .variants-toggle .buttonwrapper {
  float: right;
  margin: 0;
}
.match-details .gene-matches &gt; tr &gt; th {
  text-align: left;
  width: 50%;
}
.match-details .gene-matches &gt; tr &gt; td {
  text-align: center;
  width: 50%;
}
.match-details .gene-matches .variants-data .button.secondary {
  margin: 0;
  text-align: center;
  text-transform: none;
}
.match-details .variants-data .segmented-bar .segmented-unit-fill {
  background-color: $theme.notificationErrorColor;
}
.match-details .gene-matches .gene .segmented-bar .segmented-unit-fill,
.match-details .phenotype-matches .segmented-bar .segmented-unit-fill {
  background-color: $theme.menuLinkColor;
}

.match-details .segmented-bar {
  color: white;
}
.match-details .gene-matches .gene .segmented-bar {
  float: left;
  padding-right: 1em;
}
.match-details .variants-data .segmented-bar,
.match-details .phenotype-matches .segmented-bar {
  float: right;
}
.match-details .variants-data .segmented-bar {
  color: $theme.notificationErrorColor;
  font-size: .87em;
}
.match-details table.phenotype-matches .query,
.match-details table.phenotype-matches .result {
  text-align: left;
}
.match-details table .table-data {
  padding-left: 1em !important;
}</code>
    </property>
    <property>
      <name>New matches style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.SimilarCases</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>6319e3f0-cdcb-47fa-9563-19058b4bf336</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}
#if ($xcontext.action == 'view' &amp;&amp; $xwiki.hasAccessLevel('view', $xcontext.user, 'PhenoTips.SimilarCases'))
  #if (!$services.patientconsents.hasConsent($doc.getName(), "real"))
    #break
  #end
  #set ($suggestionsConfig = $xwiki.getDocument("${doc.space}.SimilarCasesConfiguration").getObject('PhenoTips.SimilarCases'))
  #if ($suggestionsConfig &amp;&amp; "$!{suggestionsConfig.getProperty('enable').value}" == '1')
    #set ($patient = $services.patients.get($doc.name))
    #set ($patientAccess = $services.permissions.getPatientAccess($patient))
    #if (!($patient.features.isEmpty() &amp;&amp; $patient.genes.isEmpty()) &amp;&amp; $patientAccess.getVisibility().compareTo($services.permissions.resolveVisibility('matchable')) &gt;= 0)
      ## Can see similar cases for this patient
      $xwiki.jsx.use('PhenoTips.SimilarCases', {'minify' : false})##
      $xwiki.ssx.use('PhenoTips.SimilarCases')##
      $xwiki.jsx.use($doc.fullName, {'minify' : false})##
      #set ($max_results = "$!{suggestionsConfig.getProperty('max_results').value}")
      #set ($min_score = "$!{suggestionsConfig.getProperty('min_score').value}")
      ##
      (% class="clear clinical-info similarity-info chapter"%)(((##
      == $escapetool.xml($services.localization.render('phenotips.similarCases.title')) ==
      {{html clean=false}}&lt;div class="hidden"&gt;&lt;input type="hidden" id="similarity_results__max_results" value="${max_results}"/&gt;&lt;input type="hidden" id="similarity_results__min_score" value="${min_score}"/&gt;&lt;/div&gt;{{/html}}##
      (% class="similar-cases-category similar-cases-local" %)(((
      === $escapetool.xml($services.localization.render('phenotips.similarCases.subtitle')) ===
      (% class="similarity-results-container-local" %)(((
        (% class="similarity-results-container" id="similar-patients-container" %)((()))##
        ## Pagination
        $xwiki.ssfx.use('js/xwiki/table/livetable.css', true)##
        {{html clean=false}}&lt;span class="xwiki-livetable-pagination" id="pagination-similar-cases"&gt;&lt;span class="controlPagination"&gt;
            &lt;a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))" class="prevPagination" id="pagination-prev" href="#"&gt;&lt;span class="hidden"&gt;$services.localization.render('platform.livetable.paginationPagePrevTitle')&lt;/span&gt;&lt;/a&gt;
            &lt;a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))" class="nextPagination" id="pagination-next" href="#"&gt;&lt;span class="hidden"&gt;$services.localization.render('platform.livetable.paginationPageNextTitle')&lt;/span&gt;&lt;/a&gt;
          &lt;/span&gt;
          &lt;span class="pagination"&gt;
            &lt;span class="xwiki-livetable-pagination-text"&gt;$services.localization.render('platform.livetable.paginationPage')&lt;/span&gt;
            &lt;span class="xwiki-livetable-pagination-content" id="pagination-content"&gt;&lt;/span&gt;
          &lt;/span&gt;&lt;/span&gt;
        {{/html}})))##
      )))
      ## Allow to plug in other data sources
      #foreach ($e in $services.uix.getExtensions("org.phenotips.patientSheet.similarCases"))
        (% class="similar-cases-category" %)(((
        {{html clean=false}}$services.rendering.render($e.execute(), 'xhtml/1.0'){{/html}}
        )))
      #end
    #end## can see similar patients
  #end## suggestions enabled
#end## action == view
{{/velocity}}</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.patientSheet.after</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.patientSheet.similarCases</name>
    </property>
    <property>
      <parameters/>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
