<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>VariantDisplay</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1423691852000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1423777162000</date>
  <contentUpdateDate>1423754638000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
#set( $patient = $services.patients.getPatientById("$!{request.query}"))
#set ($exomiserResults = $services.patientVariantView.getTopGenesAsJSON($patient, "$!{request.numberOfGenes}", "$!{request.numberOfVariants}"))
#if ($xcontext.action == 'get')
  $response.setContentType('application/json')
#end
{
  "query" : $patient.toJSON(),
  "results" : $exomiserResults
}
{{/velocity}}</content>
  <object>
    <name>PhenoTips.VariantDisplay</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>584de3f6-056b-4804-9709-111f0f50af3b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
    var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
    widgets.VariantDisplay = Class.create({
        variantDisplayServiceURL : "${xwiki.getURL('PhenoTips.VariantDisplay', 'get')}",
        DEFAULT_NUMBER_OF_GENES : "5",
        DEFAULT_NUMBER_OF_VARIANTS : "3",
        RESULTS_TABLE_MARKER : "variant-display-table",

        initialize    : function (query, resultsContainer, options) {
                if (!query || !resultsContainer) {return;}
             this.query = query;
             this.container = resultsContainer;
             if (options) {
                  this.numberOfGenes = options.numberOfGenes || this.DEFAULT_NUMBER_OF_GENES;
                  this.numberOfVariants = options.numberOfVariants ||this.DEFAULT_NUMBER_OF_VARIANTS;
              }

            this.launchSearch();

            this.optionsContainer = new Element('div', {'class' : 'variant-display-options'});
            this.container.insert({bottom : this.optionsContainer});
            this.initializeOptionsContainer();
            
        },
        initializeOptionsContainer : function(event){
            if (event) {event.stop();}

            this.optionsButton = new Element('span', {'class' : 'buttonwrapper variant-display-refresh'}).insert(new Element('a', {'class' : 'button', 'href' : '#'}).insert(this.Strings["optionsButton"])).observe('click', this.showOptions.bind(this));
            this.optionsContainer.insert(this.optionsButton);
        },

        showOptions     : function(event){
            if (event) {event.stop();}

            this.optionsButton.update(new Element('a', {'class' : 'button', 'href' : '#'}).insert(this.Strings["hideOptionsButton"])).stopObserving('click', this.showOptions).observe('click', this.hideOptions.bind(this));
            
            var numberOfGenesInput = new Element('select', {'id' : 'variant-display-number-of-genes'});
            // FIXME This is not the proper way of checking access, but there is no other way at the moment
            var maxGeneLevels = $('prActionEdit') ? [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 75, 100, 150, 200, 300, 500] : [1, 2, 3, 4, 5, 10];
            for (var i = 0; i &lt; maxGeneLevels.length; i++) {
                numberOfGenesInput.insert(new Element('option', {'value' : maxGeneLevels[i]}).update(maxGeneLevels[i]));
            };
            numberOfGenesInput.value = this.DEFAULT_NUMBER_OF_GENES;
            var numberOfGenesInput = new Element('label').insert(this.Strings["options.numberOfGenes"]).insert(numberOfGenesInput);
            
            var numberOfVariantsInput = new Element('select', {'id' : 'variant-display-number-of-variants'});
            for (var i = 1; i &lt;= 5; i++) {
                numberOfVariantsInput.insert(new Element('option', {'value' : i}).update(i));
            };
            numberOfVariantsInput.value = this.DEFAULT_NUMBER_OF_VARIANTS;
            var numberOfVariantsInput = new Element('label').update(this.Strings["options.numberOfVariants"]).insert(numberOfVariantsInput);
            
            var refreshButton = new Element('span', {'class' : 'buttonwrapper variant-display-refresh'}).insert(new Element('a', {'class' : 'button', 'href' : '#'}).insert(this.Strings["refreshButton"])).observe('click', this.refreshDisplay.bind(this));
            this.optionsContainer.insert(numberOfGenesInput).insert(numberOfVariantsInput).insert(refreshButton);
        },

        hideOptions     : function(event){
            if (event) {event.stop();}

            this.optionsContainer.update('');
            this.initializeOptionsContainer();
        },

        launchSearch   : function (event) {
            if (event) {event.stop();}
            if (this.activeSearch) {return;}
            var _this = this;
            this.activeSearch = new Ajax.Request(
            this.variantDisplayServiceURL,
            {
              parameters: {
                'query' : this.query,
                'outputSyntax' : "plain",
                'numberOfGenes' : this.numberOfGenes,
                'numberOfVariants' : this.numberOfVariants
              },
              method: "post",
              onCreate : function() {
                _this.container.addClassName('loading');
              },
              onSuccess: function(response) {
                _this.displayResults(response.responseJSON);
              },
              onComplete : function() {
                _this.container.removeClassName('loading');
                _this.activeSearch = false;
              }
            }
          );
        },

        refreshDisplay  : function(event) {
            if (event) {event.stop();}
            var numberOfGenesInput = $('variant-display-number-of-genes');
            this.numberOfGenes = numberOfGenesInput.options[numberOfGenesInput.selectedIndex].value;

            var numberOfVariantsInput = $('variant-display-number-of-variants');
            this.numberOfVariants = numberOfVariantsInput.options[numberOfVariantsInput.selectedIndex].value;

            this.launchSearch();
        },

        displayResults : function (data) {
            this._data = data;

            // Make sure the results are for this query
            if (!data.query) {return;}
            if (data.query.id != this.query) {return;}

            // Empty the container to make room for the new results
            if (this.resultsTable) {
                this.resultsTable.remove();
            }

            // Show result summary
            data.featuresCount = data.results.size();
            if (data.resultsCount &lt;= 0) {
                this.displaySummary("No genotype information found for this patient");
                return;
            }

            // Process results
            var _this = this;
            this.resultsTable = new Element('table', {'class' : this.RESULTS_TABLE_MARKER});
            this.container.insert({top : this.resultsTable});

            var columns = {
                "GeneScore" : {
                    display: _this._displayResultGeneScore.bind(_this),
                    headings  : [_this.Strings["geneScoreHeading"]]
                },
                "Gene"      : {
                    display: _this._displayResultGene.bind(_this),
                    headings  : [_this.Strings["geneHeading"]]
                },
                "Variant": {
                    display: _this._displayResultVariant.bind(_this),
                    headings  : [_this.Strings["variantPosition"], _this.Strings["variantChange"], _this.Strings["variantType"]]
                }
            };

            this._displayTableHeader(columns, this.resultsTable);
            data.results.each(function(r) {
                _this._displayResultRow(r, columns, _this.resultsTable);
            });
            delete this._queryFeatures;
            delete this._data;
        },
        _displayTableHeader : function (columns, table) {
            var row = this._getEmptyTableRow(table);
            for (var c in columns) {
                if (!columns.hasOwnProperty(c)) {
                    continue;
                }
                var headings = columns[c].headings;
                for (var h in headings) {
                    if (!headings.hasOwnProperty(h)) {
                        continue;
                    }
                    row.insert(new Element("th", {"class" : "variant-display-heading"}).update(headings[h]).addClassName(c));
                }
              }
          return row;
        },
        _getEmptyTableRow  : function (table) {
            //small trick for styling the tables, empty rows are divisions between genes
            if (table.lastChild &amp;&amp; table.lastChild.childElements().length == 0){
                table.lastChild.previous().addClassName("last-row-for-gene");
            }
            var row = new Element('tr');
             table.insert(row);
            return row;
        },
        _displayResultRow  : function (result, columns, table) {
            var row = this._getEmptyTableRow(table);
            for (var c in columns) {
                row.insert(columns[c].display(result));
            }
            return row;
        },
        _getLastRow        : function (table) {
            var row = table.rows[table.rows.length-1];
            return row;
        },
        _addToResultRow    : function (result, columns, table) {
            var row = this._getLastRow(table);
            for (var c in columns) {
                row.insert(columns[c].display(result));
            }
            return row;
        },
        _displayResultGene : function (r) {
            var content = new Element('td', {'class' : 'gene-name', 'rowspan' : r.variants.length});
            var geneName = new Element('p', {'class' : 'gene-name'});
            geneName.update(r.name);
            content.insert(geneName)
            return content;
        },
        _displayResultGeneScore : function (r) {
            var content = new Element('td', {'class' : 'gene-score', 'rowspan' : r.variants.length});
            var functionality = r.score;
            var geneScore = new Element('div', {'class' : 'gene-score'});
            geneScore.insert(this.Utils.generateSegmentedBar(5, functionality));
            content.insert(geneScore);
            return content;
        },
        _displayResultVariant : function (r) {
            var variantSubTable = new Element ('table');
            var _this = this;
            var variantColumns = {
                "Position" : {
                    display: this._displayResultVariantPosition.bind(this)
                },
                "Change" : {
                    display: this._displayResultVariantChange.bind(this)
                },
                "Type" : {
                    display: this._displayResultVariantType.bind(this)
                },
            };

            for (var i = 0; i&lt;r.variants.length; i++){
                _this._addToResultRow(r.variants[i], variantColumns, _this.resultsTable);
                if (!r.variants[i+1]){
                    //adding a class for styling the table
                    _this.resultsTable.lastChild.addClassName("last-row-for-gene");
                } else {
                    _this.resultsTable.insertRow();
                }
            }
        },

        _displayResultVariantPosition : function (r) {
            var content = new Element('td', {'class' : 'variant-position'});
            var _this = this;
            if (r.chrom &amp;&amp; r.position &amp;&amp; r.ref) {
                var start = r.position;
                var end = r.position + r.ref.length;
            var positionText = _this.Strings["positionPhrase"].replace("__CHROMOSOME__",r.chrom.toUpperCase()).replace("__START__", start).replace("__STOP__", end);
                var positionURLFragment = "chr" + r.chrom.toUpperCase() + ":" + start + "-" + end;
                var assembly = r.assembly || "hg19";
                var position = new Element('a', {
                     'href' : 'http://genome.ucsc.edu/cgi-bin/hgTracks?db=' + assembly + '&amp;position=' + encodeURIComponent(positionURLFragment),
                     'class' : 'button secondary',
                     'target' : '__blank',
                     'title' : _this.Strings["variantPositionLinkTitle"]
                }).update(positionText).wrap('span', {'class' : 'buttonwrapper'});
                content.insert(position);
            }
            return content;

        },

        _displayResultVariantChange : function (r) {
            var content = new Element('td', {'class' : 'variant-change'});
            var displayedRef = (r.ref.length &gt; 10) ? (r.ref.substring(0,10)+"...") : r.ref;
            var displayedAlt = (r.alt.length &gt; 10) ? (r.alt.substring(0,10)+"...") : r.alt;
            content.update("&lt;span class='dna-fragment ref'&gt;" + displayedRef + "&lt;/span&gt; → &lt;span class='dna-fragment alt'&gt;" + displayedAlt + "&lt;/span&gt;");
            return content;
        },

        _displayResultVariantType : function (r) {
            var content = new Element('td', {'class' : 'variant-type'}).update("&lt;span class='variant-type-text'&gt;" + r.type + "&lt;/span&gt;");
            return content;
        },

        Utils : {
            generateSegmentedBar : function (count, value) {
                var bar = new Element('div', {'class' : 'segmented-bar', title : Math.round(value * 100) + '%' || ''});
                var valueUnit = 1 / count;
                for (var i = 0; i &lt; count; ++i) {
                  var segmentFill = Math.round(100 * Math.min(Math.max((value - i * valueUnit) / valueUnit, 0), 1));
                  var segment = new Element('span', {'class' : 'segmented-unit'}).update(
                                new Element('span', {
                                    'class' : 'segmented-unit-fill',
                                    'style' : "width: " + segmentFill + "%"
                                })
                  );
                  bar.insert(segment);
                }
                return bar.insert(' ' + Math.round(value * 100) + '%');
              },
        },

        Strings : {
            "options.numberOfGenes": "Maximum number of genes: ",
            "options.numberOfVariants": "Maximum variants per gene: ",
            "positionPhrase"  : "chr__CHROMOSOME__: __START__ - __STOP__",
            "variantPositionLinkTitle" : 'Visualize in the UCSC Genome Browser',
            "geneScoreHeading": "Score",
            "geneHeading"     : "Gene",
            "variantPosition" : "Variant Position",
            "variantChange"   : "Variant",
            "variantType"     : "Effect",
            "optionsButton"   : "Options",
            "hideOptionsButton": "Hide Options",
            "refreshButton"   : "Refresh"
        }

    });

    var init = function() {
        var container = $('variant_display_container');
        new PhenoTips.widgets.VariantDisplay(new XWiki.Document().page, container, {
            numberOfGenes : 5,
            numberOfVariants : 3
        });
    };


    (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

    // End PhenoTips augmentation.
    return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>VariantDisplayer</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.VariantDisplay</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>dbe38413-4d80-48f3-875f-0e854b822384</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

table.variant-display-table .segmented-bar {
  color: $theme.textColor;
  font-size: 75%;
  white-space: nowrap;
  width: auto;
}

table.variant-display-table .segmented-bar .segmented-unit {
  width: 8px;
  height: 8px;
  display: inline-block;
  margin: 0 1px;
  border: 1px solid black;
  border-radius: 1px;
}

table.variant-display-table .segmented-bar .segmented-unit-fill {
  width: 8px;
  height: 8px;
  display: block;
  background-color: $theme.textColor;
  border-radius: 1px;
}

td.gene-score {
  border-bottom : 1px solid $theme.textColor;
  border-right: none;
}

td.gene-name {
  border-bottom: 1px solid $theme.textColor;
}

td.gene-name, td.variant-position, td.variant-change, td.variant-type {
  text-align: left;
}

th.variant-display-heading{
  border-top: 1px solid black;
  border-bottom: 1px solid black;
}

th.variant-display-heading:first-child {
  border: 1px solid black;
  border-right: none;
}

th.variant-display-heading:last-child {
  border-right: 1px solid black;
}

table.variant-display-table{
  margin:0;
  margin-bottom: 1px;
  width: 100%;
}

table.variant-display-table td{
  padding: 10px;
}

#variant_display_container{
  display:inline-block;
  width: 100%;
}

.variant-display-table &gt; .last-row-for-gene &gt; td {
  border-bottom: 1px solid $theme.textColor;
}

.variant-display-table .variant-position .button.secondary {
  text-transform: none;
}
</code>
    </property>
    <property>
      <name>VariantTableStyle</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.VariantDisplay</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>590626bc-bd33-471b-86cd-d2e580ab59a3</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>.variant-display-refresh {
  float: right;
}
.variant-display-options &gt; label {
  padding-top: 5px;
}</code>
    </property>
    <property>
      <name>VariantTableOptionsStyle</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.VariantDisplay</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>33f40964-4933-49d0-a128-e55d06c395b8</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}
#if ($xcontext.action == 'view' &amp;&amp; $xwiki.hasAccessLevel('view', $xcontext.user, 'PhenoTips.VariantDisplay') &amp;&amp; $services.patientVariantView.hasGenotype($patient))
      $xwiki.jsx.use('PhenoTips.VariantDisplay', {'minify' : false})##
      $xwiki.ssx.use('PhenoTips.VariantDisplay')##
      === Top genes in VCF ===
      {{html clean=false}}&lt;p class=box hint"&gt;Gene scores are computed from the uploaded VCF file and patient phenotypes using &lt;a href="http://www.sanger.ac.uk/resources/software/exomiser/" target="_blank"&gt;the Exomiser&lt;/a&gt;. Each score reflects the phenotypic relevance of the gene and the harmfulness and allele frequency of the variants.&lt;/p&gt;
&lt;div id="variant_display_container"&gt;&lt;/div&gt;{{/html}}##
#end
{{/velocity}}
</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.patientSheet.section.genotype</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.patientSheet.field.variantdisplay</name>
    </property>
    <property>
      <parameters>title=Top genes in VCF
enabled=true
required=
order=4
fields=</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
